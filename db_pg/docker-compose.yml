# docker-compose.yml para DGI Service
version: '3.8'

services:
  # Base de datos PostgreSQL principal
  postgres:
    image: postgres:15-alpine
    container_name: dgi_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: dgi_user
      POSTGRES_PASSWORD: dgi_password_2024
      POSTGRES_DB: dgi_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - dgi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dgi_user -d dgi_service"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Adminer para administraci√≥n de base de datos
  adminer:
    image: adminer:4.8.1
    container_name: dgi_adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dgi_network

  # Redis para cache y sesiones (opcional pero recomendado)
  redis:
    image: redis:7-alpine
    container_name: dgi_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dgi_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dgi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16